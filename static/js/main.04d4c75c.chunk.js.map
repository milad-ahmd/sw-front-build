{"version":3,"sources":["components/loading.js","components/AppliedRoute.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","C","component","cProps","props","rest","render","LoadingComponent","isLoading","error","AsyncLanding","Loadable","loader","loading","AsyncMain","AsyncLogin","AsyncSignUp","childProps","AppliedRoute","path","exact","App","state","isAuthenticated","isAuthenticating","this","userHasAuthenticated","setUserHasAuthenticated","Routes","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAA,sDACe,SAASA,IACpB,OAAO,yBAAKC,UAAU,iB,yNCCX,kBAAcC,EAAd,EAAGC,UAAqBC,EAAxB,EAAiBC,MAAkBC,EAAnC,4CACb,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAAAF,GAAK,OAAI,kBAACH,EAAD,iBAAOG,EAAWD,S,QCChDI,EAAmB,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAElC,OAAID,EACO,6BACH,kBAAC,IAAD,OAICC,EACE,6EAEA,MAKTC,EAAeC,IAAS,CAACC,OAAO,kBAAM,gCAAsCC,QAAQN,IACpFO,EAAYH,IAAS,CAACC,OAAO,kBAAM,6DAAmCC,QAAQN,IAC9EQ,EAAaJ,IAAS,CAACC,OAAO,kBAAM,2EAAkCC,QAAQN,IAC9ES,EAAcL,IAAS,CAACC,OAAO,kBAAM,6DAAmCC,QAAQN,IACvE,kBAAEU,EAAF,EAAEA,WAAF,OACX,kBAAC,IAAD,KACI,kBAACC,EAAD,CAAcC,KAAK,IAAIC,OAAK,EAAClB,UAAWQ,EAAcN,MAAOa,IAC7D,kBAACC,EAAD,CAAcC,KAAK,QAASjB,UAAWY,EAAWV,MAAOa,IACzD,kBAACC,EAAD,CAAcC,KAAK,SAAUjB,UAAWa,EAAYX,MAAOa,IAC3D,kBAACC,EAAD,CAAcC,KAAK,UAAWjB,UAAWc,EAAaZ,MAAOa,MCHtDI,E,kDAtBb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAEDkB,MAAQ,CACXC,iBAAiB,EACjBC,kBAAkB,GALH,E,qDASjB,IAAMP,EAAa,CACjBM,gBAAiBE,KAAKH,MAAMC,gBAC5BG,qBAAsBD,KAAKC,qBAC3BC,wBAAyBF,KAAKE,yBAEhC,OACI,6BACE,kBAACC,EAAD,CAAQX,WAAYA,S,GAjBZY,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uBCTNC,IAAS7B,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJ8B,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.04d4c75c.chunk.js","sourcesContent":["import React from 'react';\nexport default function Loading() {\n    return <div className=\"boxLoading\">\n    </div>;\n}\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nexport default ({ component: C, props: cProps, ...rest }) =>\n  <Route {...rest} render={props => <C {...props} {...cProps} />} />;\n","import React from \"react\";\nimport {Switch} from \"react-router-dom\";\nimport Loadable from \"react-loadable\";\nimport AppliedRoute from \"./components/AppliedRoute\";\nimport Loading from \"./components/loading\";\nconst LoadingComponent = ({isLoading, error}) => {\n    // Handle the loading state\n    if (isLoading) {\n        return <div>\n            <Loading/>\n        </div>;\n    }\n    // Handle the error state\n    else if (error) {\n        return <div>Sorry, there was a problem loading the page.</div>;\n    } else {\n        return null;\n    }\n};\n// const AsyncOneColumn = Loadable({loader:() => import('./containers/Layout/emptyLayout'),loading:LoadingComponent});\n\nconst AsyncLanding = Loadable({loader:() => import('./containers/layout/Landing'),loading:LoadingComponent})\nconst AsyncMain = Loadable({loader:() => import('./containers/layout/Main'),loading:LoadingComponent})\nconst AsyncLogin = Loadable({loader:() => import('./containers/auth/login'),loading:LoadingComponent})\nconst AsyncSignUp = Loadable({loader:() => import('./containers/auth/signUp'),loading:LoadingComponent})\nexport default ({childProps}) =>\n    <Switch>\n        <AppliedRoute path=\"/\" exact component={AsyncLanding} props={childProps}/>\n        <AppliedRoute path=\"/main\"  component={AsyncMain} props={childProps}/>\n        <AppliedRoute path=\"/login\"  component={AsyncLogin} props={childProps}/>\n        <AppliedRoute path=\"/signUp\"  component={AsyncSignUp} props={childProps}/>\n    </Switch>\n","import React, {Component} from 'react';\n\n\nimport Routes from \"./Routes\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isAuthenticated: false,\n      isAuthenticating: true\n    };\n  }\n  render() {\n    const childProps = {\n      isAuthenticated: this.state.isAuthenticated,\n      userHasAuthenticated: this.userHasAuthenticated,\n      setUserHasAuthenticated: this.setUserHasAuthenticated\n    };\n    return (\n        <div>\n          <Routes childProps={childProps}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './scss/general.scss'\n\n// ReactDOM.render(<App/>, document.getElementById('root'));\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}